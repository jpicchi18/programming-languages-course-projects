=========================
CS 131 Homework 4 Report
=========================

--> "Illustrate the performance difference on an example of your choice,
    measuring performance with statistics/0 or statistics/2."

        I measured the performance of kenken/3 and plain_kenken/3 on the last
        example from the homework 4 spec, i.e. the example shown below...

		kenken_testcase(
		    4,
		    [
		    +(6, [[1|1], [1|2], [2|1]]),
		    *(96, [[1|3], [1|4], [2|2], [2|3], [2|4]]),
		    -(1, [3|1], [3|2]),
		    -(1, [4|1], [4|2]),
		    +(8, [[3|3], [4|3], [4|4]]),
		    *(2, [[3|4]])
		    ]
		).

	I generated the performance statistics using the predicate "time_test",
	which is defined as follows...

	      time_test :-
		   fd_set_vector_max(255),

		   statistics,
		   kenken_testcase(N,C), kenken(N,C, _),
		   statistics, nl,

		   kenken_testcase(X,Y), plain_kenken(X,Y, _),
		   statistics.

        This generates 3 statistics measurement outputs. To obtain the time
        measurements for kenken/3, I calculated the difference between the first
        and second statistics outputs for each type of time measurement
        (i.e. user, system, cpu, and real time).

	To obtain the time measurements for plain_kenken/3, I calculated the
	difference between the second and third statistics outputs for each type
	of time measurement (i.e. user, system, cpu, and real time).

	Taking the average of 3 different calls to "time_test", I obtained the
	following results...

		  kenken/3...
			user   = 0 ms
			system = 0 ms
			cpu    = 0 ms
			real   = 0 ms

		  plain_kenken/3...
			user   = 27 ms
			system = 1 ms
			cpu    = 28 ms
			real   = 28 ms

	Analysis:
		As we can see from the results above, kenken/3 is significantly
		faster on the testcase given when compared against
		plain_kenken/3. It is quicker in almost all fields, apart from
		"system time", which is approximately the same in both kenken/3
		and plain_kenken/3 because both predicates use barely any kernel
		calls, if any.

		Therefore, the implementation of kenken/3 using domain_solver is
		more time efficient, and the implementation of plain_kenken/3
		without domain_solver conceptually less complicated, since it
		does not require knowledge of the domain_solver API.


--> "Suppose you want to solve no-op KenKen using GNU Prolog. Design a good
    application programming interface for your solver, i.e., specify what Prolog
    terms should be passed to your solver and what the caller should expect
    should happen to those terms after successful and unsuccessful calls. Also,
    give an example call, and its behavior, using the style shown below. You do
    not need to implement the solver, only specify its API and implement a
    predicate noop_kenken_testcase that performs your example call."

       TLDR: noop_kenken/3 should functon identically to kenken/3, just with a C
       argument that has a different format and contains no operators, and an
       extra argument D that represents a list containing the operators
       corresponding to each constraint in C, ordered in the same way that the
       constraints are ordered in C.

       The predicate would be noop_kenken/3, which accepts the following
       arguments...

		N : a nonnegative integer specifying the number of cells on each
		    side of the KenKen square.
		    
		C : a list of numeric cage constraints without operators, where
		    each constraint in C is a tuple of form...
		         (R, L)
		    where R is equivalent to one of the following...
		    
		         1. the sum of the integers in the list L of square
		            coordinates.
			    
		    	 2. the product of the integers in the list L of square
		            coordinates.
			    
		         3. the difference between the two integers that
		    	    correspond to the first two square coordinates in the list L
		    	    of square coordinates (either the first integer minus the
		    	    second, or the second minus the first).

			 4. the quotient of the two integers that correspond to
		    	    the first two square coordinates in the list L
		    	    of square coordinates (either the first integer
		    	    divided by the second, or the second divided by the first).
		    
		T : a list of list of integers. All the lists have length
		    N. This represents an NÃ—N solution grid.

                D : a list of operators, where the operator at index i in list D
                    is the operator corresponding to the constraint at index i
                    in argument C. The possible elements of D are +, -, *, and /.

       In the above description of C, "square coordinates" are terms [i|j] where
       i and j are row and column indexes in the range 1 through N,
       inclusive. The indexes identify the square in the KenKen diagram that is
       affected by the constraint in question. The bottom left square is [N|1]
       and the top right square is [1|N].

       Preconditions... N and C must be ground terms, that is, they cannot be
       logical variables or terms containing any logical variables. N must also
       be a nonnegative integer.

       T may contain logical variables, which can represent integers that
       noop_kenken/3 should fill in, or can represent entire rows, or the entire
       grid.

       D may contain logical variables, which can represent operators that
       noop_kenken/3 should fill in, or can represent the entire list of
       operators corresponding to all of the constraints in C.

       After a successful call to noop_kenken/3, N should be bound to a
       nonnegative integer, C should be bound to a list of constraints, as
       described above, T should be bound to an N-dimensional list of
       N-dimensional lists of integers, and D should be bound to a list of
       operators whose length is equivalent to the length of C. All 4 of the
       structures to which N, C, T, and D are bound will be ground terms
       (i.e. will not contain any logical variables).

       After an unsuccessful call to noop_kenken/3, the prolog interpretter
       should either output "no." or an error message. All 4 terms should remain
       bound to whatever they were bound to before the call. If any of the terms
       were ground terms, then they will remain constant.

       Example call...

       	       % define a test case
       	       noop_kenken_testcase(
		   4,
		   [
		     (6, [[1|1], [1|2], [2|1]]),
		     (96, [[1|3], [1|4], [2|2], [2|3], [2|4]]),
		     (1, [[3|1], [3|2]]),
		     (1, [[4|1], [4|2]]),
		     (8, [[3|3], [4|3], [4|4]]),
		     (2, [[3|4]])
		   ]
	       ).

	       % call noop_kenken on our test case
	       noop_kenken_testcase(N, C), noop_kenken_(N, C, T, D).

	       % the output appears as follows (reindented to fit)...
	       
		   C = [(6,[[1|1],[1|2],[2|1]]),
		        (96,[[1|3],[1|4],[2|2],[2|3],[2|4]]),
		        (1,[[3|1],[3|2]]),
			(1,[[4|1],[4|2]]),
			(8,[[3|3],[4|3],[4|4]]),
			(2,[[3|4]])]
                   N = 4
                   T = [[1,2,3,4],[3,4,2,1],[4,3,1,2],[2,1,4,3]]
		   D = [+, *, -, -, +, *] ?
